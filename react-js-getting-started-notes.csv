"Note","Course","Module","Clip","Time in Clip","URL"
"https://jscomplete.com/learn/react-beyond-basics/react-cfp","React: Getting Started","The Basics","Introduction","1:55","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=0&mode=live&start=115.246211&noteid=d5319767-af63-4f59-8513-df18107e441a"
"Why React?\nReact is a Javascript library for building User Interfaces.\nwe tell react what needs to be built and it builds on our behalf","React: Getting Started","The Basics","Why React?","0:08","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=8.830163&noteid=a78f2f7c-2925-4cfa-8b51-30cca972ff61"
"React is declarative","React: Getting Started","The Basics","Why React?","1:51","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=111.698585&noteid=2e8821a7-47c1-4b8e-ba45-ab2db6efb4e8"
"HMTL is declarative for static content. React is declarative for dynamic data.","React: Getting Started","The Basics","Why React?","2:16","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=136.887414&noteid=99a0b502-0784-4e55-9c4e-0d27bae3f57b"
"How React is not being a framework a good thing?\nWith framework many smart design decisions are already being made. It focuses on writing good application level logic.\nDisadvantages of frameworks\nLimited flexibility \n- do things a certain way\n- hard to deviate\nLarge and full of features\n- Hard to customize\n- Use the whole thing\n","React: Getting Started","The Basics","Why React?","2:25","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=145.323484&noteid=b535c4a8-3bf6-4a40-a12a-65c0f7ba9ee8"
"""write program that do one thing and do it well""","React: Getting Started","The Basics","Why React?","3:30","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=210.360304&noteid=c046eabf-df0d-4dc5-8950-51aedc5adede"
"React follows the same thing. Enabling developers to declaratively describe their user interfaces and not all their state of these interfaces.","React: Getting Started","The Basics","Why React?","3:39","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=219.883112&noteid=1070fb1f-b277-472d-8ce4-c6cb95f1c427"
"Working with the DOM is hard. React provides a virtual DOM that is friendlier.\nJust Javascript\nReact Native allows you to use your same react skills to build native  mobile applications. You can even share the same logic with your web, ios and android application.\nDecalarative language (model UI and state)","React: Getting Started","The Basics","Why React?","3:57","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=1&mode=live&start=237.184105&noteid=ab4796ab-8c3a-4a07-acae-f3c0965faf12"
"https://jscomplete.com/learn/why-react","React: Getting Started","The Basics","React's Basic Concepts","0:03","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=2&mode=live&start=3.467401&noteid=5987ff11-4cf5-4b01-8c78-e4a92282ab90"
"React's Basic Concepts\nComponents - Describe user interfaces with components\n - Like functions\n- Input : props, state Output : UI\n- Reusable and composable i.e  we can reuse a component and one component can contain other components\n - <Component />\n- Can manage a private state\n\nReactive updates\n - React will react\nWhen the  state of a react component changes i.e input changes the user interface it represents i.e the output changes as well.\n - Take updates to the browser\n\nVirtual views in memory\n- Generate HTML using Javascript\n- No HTML template language\n - Tree reconciliation\n","React: Getting Started","The Basics","React's Basic Concepts","0:09","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=2&mode=live&start=9.165935&noteid=ab025a6c-bc2e-458a-8cb8-e6042fdd508a"
"React Component \n- Function Component - these are simpler\n- Class Component - these are more powerful","React: Getting Started","The Basics","React's Basic Concepts","3:05","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=2&mode=live&start=185.159602&noteid=4c888e50-978a-4dba-ab2f-e9063796b9e2"
"Props input is an explicit one. It is similar to the list of attributes in html element can have. The State input is an implicit one. React uses state to auto reflect changes in the browser. Within a component the state object can be changed. Props represent fixed values and are immutable. Components can only chang their internal state not their properties.","React: Getting Started","The Basics","React's Basic Concepts","4:05","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=2&mode=live&start=245.385593&noteid=e1beed5f-f98e-419d-bfa2-9cf579782dbd"
"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en","React: Getting Started","The Basics","Your First React Component","2:52","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=172.040535&noteid=1187e386-7a22-4333-9e54-2adebc7787a6"
"React Developer Tools","React: Getting Started","The Basics","Your First React Component","2:52","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=172.040535&noteid=1b7861f3-8b3a-4b55-b766-3e429d9be805"
"To dispaly a react component in a browser we need to instruct the DOM library on how to do that. The first argument of render will have the Component to render and the second is the DOM element in the browser where we wish the react component to show  up.","React: Getting Started","The Basics","Your First React Component","5:47","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=347.188615&noteid=25655d56-5233-4b16-af7f-054401491e1b"
"How are we writing html inside a JS function? Explain what is happening in line 2","React: Getting Started","The Basics","Your First React Component","6:17","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=377.560765&noteid=7fc049c5-9d63-4aaa-9a3e-326ef021a2d6"
"The playground is equipped with a special Javascript extension name JSX\nfacebook.gihub.io/jsx","React: Getting Started","The Basics","Your First React Component","6:40","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=400.579662&noteid=9a7198b3-1db9-4161-a019-6c110dc74462"
"The line2 is not HTML. It is JSX","React: Getting Started","The Basics","Your First React Component","6:46","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=406.751134&noteid=d474c8d8-ed9f-4fd1-9c6f-1d58f79b4ce7"
"It won't be execitedx by the browser but will be executed by JSX and compiled to something else that the browser can understand.","React: Getting Started","The Basics","Your First React Component","6:54","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=414.497075&noteid=046a8354-14cf-47a2-a3c5-0b94cfd6ae17"
"https://babeljs.io/repl\nMake sure React is preselected","React: Getting Started","The Basics","Your First React Component","7:07","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=427.177513&noteid=dadd1748-37d9-46d9-a3c5-57fc67049498"
"We write code similar ti html and Babel converts it to React API calls","React: Getting Started","The Basics","Your First React Component","7:44","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=464.01245&noteid=c5d74266-2d65-438f-89a1-28f3f4256118"
"function Hello() {\n\treturn <div>Hello React!</div>;\n}\n\nReactDOM.render(\n  <Hello />, \n  document.getElementById('mountNode'),\n);\nReact.createElement('the element to be created', 'any attributes the element is going to have','the child of that div element')\nfunction Hello() {\n\treturn React.createElement('div',null,'Hello React!!!!!');\n}\n\nReactDOM.render(\n  React.createElement(Hello,null), \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First React Component","8:08","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=488.577482&noteid=68cd7687-e097-44ad-b355-9536d9c10534"
"A component name has to start with an uppercase letter. Or else React will think it as a html element.","React: Getting Started","The Basics","Your First React Component","9:56","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=596.414941&noteid=6a7633df-a12d-4600-9d8b-a5ce534705fc"
"function Button(){\n  return <button>Click Me</button>\n}\n\nReactDOM.render(\n  <Button/>,\n  document.getElementById('mountNode')\n)","React: Getting Started","The Basics","Your First React Component","10:24","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=624.230306&noteid=28ec9892-8435-40ad-bfc8-3733a86ee706"
"Will add state to make this button interactive. Will use React Hooks to do that. Currently it's a stateless button.","React: Getting Started","The Basics","Your First React Component","10:32","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=3&mode=live&start=632.495791&noteid=493fbb94-fdb7-478c-8e65-0c732183d599"
"To use state object, React has a special object name useState().\nThis useState returns two things:\n1) state object (getter)\n2) updater function (setter)","React: Getting Started","The Basics","Your First React Hook","0:28","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=28.555964&noteid=c03af66d-b957-480b-a4a8-989177be8db5"
"The state object can be of any type. Can be a string or number or array or anything else.","React: Getting Started","The Basics","Your First React Hook","0:45","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=45.95192&noteid=2e4906ff-2e89-421c-af44-109577c89ee9"
"Since JS functions only return a single value so useState returns an array with two variables\nconst [counter, setCounter] = useState()\nThis special syntax is JS Array destructuring","React: Getting Started","The Basics","Your First React Hook","1:10","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=70.759443&noteid=dba38327-315a-426d-828e-43581cf39e6a"
"const [currentStateValue, functionToSetNewStateValue] = useState(initialStateValue)","React: Getting Started","The Basics","Your First React Hook","1:46","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=106.762444&noteid=2f87cc61-5095-47ff-871d-84d3ba699999"
"JSX supports displaying dynamic expressions if you place them within curly braces anywhere inside JSX.\n{counter}","React: Getting Started","The Basics","Your First React Hook","2:02","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=122.875756&noteid=d9ae3b4a-c4bb-4778-9df3-1d413a5f157a"
"onClick = {functionRef}\nHere onClick is also case sensitive.\nWe just need to pass the pointer or reference to the fucntino. We should call onClick = {functionRef()} This is wrong","React: Getting Started","The Basics","Your First React Hook","3:22","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=202.337513&noteid=316f26fc-5d38-42e4-a1f0-d9261ee18b43"
"function logRandom(){\n  console.log(Math.random())\n}\nfunction Button() {\n  const [counter, setCounter] = useState(0);\n\treturn <button onClick={logRandom}>{counter}</button>;\n}\n\nReactDOM.render(\n  <Button />, \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First React Hook","4:14","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=254.98311&noteid=5c2cf24d-9a7c-41a8-a357-06fee6402630"
"function Button() {\n  const [counter, setCounter] = useState(0);\n\treturn <button onClick={() => console.log(Math.random())}>{counter}</button>;\n}\n\nReactDOM.render(\n  <Button />, \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First React Hook","4:50","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=290.442659&noteid=ab194499-5423-40ce-a457-df003f5fb06a"
"function Button() {\n  const [counter, setCounter] = useState(0);\n\treturn <button onClick={() => setCounter(counter+1)}>{counter}</button>;\n}\n\nReactDOM.render(\n  <Button />, \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First React Hook","5:35","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=335.087879&noteid=37b3b636-94cf-449f-8691-77ea356a7589"
"useState function is called a hook in the react world. It is similar to a mixin or a module but it is a state for one that hooks this simple component into a state. useState manages counter state.","React: Getting Started","The Basics","Your First React Hook","5:39","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=339.470748&noteid=14d4f8c7-f83c-4af3-ba76-8dd6e71064c1"
"Double counter value on clicking button\nfunction Button() {\n  const [counter, setCounter] = useState(5);\n\treturn <button onClick={() => setCounter(counter*2)}>{counter}</button>;\n}\n\nReactDOM.render(\n  <Button />, \n  document.getElementById('mountNode'),\n);\n\nDon't write such big lines.. instead\nfunction Button() {\n\tconst [counter, setCounter] = useState(5);\n\n  const handleClick = () => setCounter(counter*2);\n\n\treturn (\n    <button onClick={handleClick}>\n      {counter}\n    </button>\n  );\n}\n\nReactDOM.render(\n  <Button />, \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First React Hook","6:55","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=4&mode=live&start=415.129701&noteid=a9a6be59-7f88-41c9-990e-c8247c767c36"
"Not every React component has to have a stateful hook.\n","React: Getting Started","The Basics","Your First One-way Data Flow","0:00","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=0&noteid=5eeb4a62-22c3-445c-919f-2f011a61e426"
"// Challenge: Start the button with 5\n// Double the button's label on each click\n\nfunction Button() {\n\tconst [counter, setCounter] = useState(5);\n  const handleClick = () => setCounter(counter*2);\n\treturn (\n    <button onClick={handleClick}>\n      {counter}\n    </button>\n  );\n}\n\nfunction Display(){\n  return (\n  <div></div>\n  );\n}\n\nReactDOM.render(\n  [<Button />,<Display/>], \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First One-way Data Flow","0:00","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=0&noteid=c5f5c0b8-dd1a-4ea6-bfbf-0609bf21bd19"
"Why can't we write two components next to each other inside render method?\nIt won't work coz each of them gets translated into a function call.\n\nSolution,\nWe can render as array elements\nReactDOM.render(\n[<Button/>, <Display/>\n)\nThis method is good when all the elements you are rendering are coming from the same component in a dynamic way. \nSecond Solution is to make these react element as children of a react element. We can add them inside  a parent element.\nReactDOM.render(\n<div>\n    <Button/>\n    <Display/>\n</div>\n)","React: Getting Started","The Basics","Your First One-way Data Flow","2:28","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=148.418546&noteid=3d2aefb2-80e3-4b6d-9331-2c5fab729b85"
"If you need to render multiple div elements without the need to add a parent div, you can use React.Fragment.\nThis will do the same thing but no new DOM parent will be introduced.\n\nReactDOM.render(\n<ReactFragment>\n<Button/>\n<Display/>\n</ReactFragment>\n)\nInstead of Reactfragment you can also write a blank\nReactDOM.render(\n<>\n<Button/>\n<Display/>\n</>\n)\nThis empty tag if supported in the environment will get compiled to the react.fragment version.","React: Getting Started","The Basics","Your First One-way Data Flow","3:18","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=198.025871&noteid=d4974a9f-1457-41e2-bd02-5b4fb6cac1ec"
"We can extract the parent div into its own component.","React: Getting Started","The Basics","Your First One-way Data Flow","4:02","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=242.168224&noteid=a0b10459-69b3-4680-a705-c4bc775cf8cd"
"function Button() {\nconst [counter, setCounter] = useState(5);\nconst handleClick = () => setCounter(counter*2);\nreturn (\n<button onClick={handleClick}>\n{counter}\n</button>\n);\n}\nfunction Display(){\nreturn (\n<div></div>\n);\n}\n\nfunction App(){\nreturn (\n  <div>\n   <Button/>\n  <Display/>\n  </div>\n);\n}\n\nReactDOM.render(\n<App/>,\ndocument.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First One-way Data Flow","4:02","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=242.168224&noteid=14e8f623-6528-432e-94a7-9975a3683faa"
"A state can be accesssed only by that component itself.","React: Getting Started","The Basics","Your First One-way Data Flow","5:05","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=305.160424&noteid=9861fcb6-78d9-4e44-ac58-7d1277ed8a24"
"To make the counter state accessible to both Button and Display sibling components we will have to add it to our parent component which is the App component.","React: Getting Started","The Basics","Your First One-way Data Flow","5:18","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=318.067333&noteid=84114e0c-46eb-4fc1-894d-277f9cd705ef"
"We need to flow the data i.e counter state object from the App Component to the Display Component using propers object.","React: Getting Started","The Basics","Your First One-way Data Flow","5:54","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=354.634016&noteid=31ae0da0-d258-4bfc-a360-4c1505409882"
"To pass a prop into a component you specify a prop. Give any attribute name for the props and value will be it's counter variable.\n\nfunction Button() {\n\nconst handleClick = () => setCounter(counter*2);\nreturn (\n<button onClick={handleClick}>\n{counter}\n</button>\n);\n}\nfunction Display(props){\nreturn (\n<div></div>\n);\n}\nfunction App(){\nconst [counter, setCounter] = useState(5);\nreturn (\n<div>\n<Button/>\n<Display  message={counter}/>\n</div>\n);\n}\nReactDOM.render(\n<App/>,\ndocument.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First One-way Data Flow","6:13","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=373.521013&noteid=3043fbf2-c634-4129-8aed-146a66614553"
"All function components  receive the props object even when they have no attributes. Here, Button component will also receive props object but that has been empty. Because the components can receive many attributes , this props object will have a key value pair for each attribute.","React: Getting Started","The Basics","Your First One-way Data Flow","6:18","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=378.819031&noteid=f12515d0-1cc6-4778-95a5-8e58fde036ee"
"function Button() {\n\n//const handleClick = () => setCounter(counter*2);\nreturn (\n\n<button onClick={() => {}}>\n+1\n</button>\n);\n}\nfunction Display(props){\nreturn (\n\n<div>{props.message}</div>\n);\n}\nfunction App(){\nconst [counter, setCounter] = useState(35);\nreturn (\n\n<div>\n\n<Button/>\n\n<Display message={counter}/>\n</div>\n);\n}\nReactDOM.render(\n\n<App/>,\ndocument.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First One-way Data Flow","6:20","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=380.511366&noteid=b461b048-cd3a-4c04-8c98-05e118ece54e"
"Parents component can flow their data down to children components. Parents component can flow their behaviour down to children components.","React: Getting Started","The Basics","Your First One-way Data Flow","7:26","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=446.322073&noteid=ac4af1b2-220f-42b8-a044-3a7eb48e037b"
"function Button(props) {\n\n//const handleClick = () => setCounter(counter*2);\nreturn (\n\n<button onClick={props.onClickFunction}>\n+1\n</button>\n);\n}\nfunction Display(props){\nreturn (\n\n<div>{props.message}</div>\n);\n}\nfunction App(){\nconst [counter, setCounter] = useState(35);\nconst incrementCounter = () => setCounter(counter+1)\nreturn (\n\n<div>\n\n<Button  onClickFunction = {incrementCounter}/>\n\n<Display message={counter}/>\n</div>\n);\n}\nReactDOM.render(\n\n<App/>,\ndocument.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Your First One-way Data Flow","9:05","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=545.268254&noteid=ec435bb2-0828-4855-851c-0f8573a29f14"
"Each component here has certain reponsibilities and they get to focus on that. This is Responsibility Isolation.","React: Getting Started","The Basics","Your First One-way Data Flow","9:56","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=596.902943&noteid=12c62fb2-3f79-4d9f-87c3-d5a11db9fd04"
"We get to design and choose the level of responsiblity of our own components.","React: Getting Started","The Basics","Your First One-way Data Flow","10:31","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=631.895732&noteid=109b007e-dc15-4b23-8172-d3016c651964"
"Better to define the state down in a tree as close as possible to the children who need to access that value on the state.","React: Getting Started","The Basics","Your First One-way Data Flow","10:52","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=5&mode=live&start=652.173014&noteid=570156c5-2ca6-403f-8a50-9059febff777"
"function Buttons(props) {\n  const handleClick = () => props.onClickFunction(props.increment);\n\treturn (\n  \t<button onClick={handleClick}>\n      +{props.increment}\n    </button>\n  );\n}\n\nfunction Display(props) {\n\treturn (\n  \t<div>{props.message}</div>\n  );\n}\n\nfunction App() {\n\tconst [counter, setCounter] = useState(0);\n  const incrementCounter = (incrementValue) => setCounter(counter+incrementValue);\n\treturn (\n    <div>\n      <Buttons onClickFunction={incrementCounter} increment={1} />\n      <Buttons onClickFunction={incrementCounter} increment={5} />\n      <Buttons onClickFunction={incrementCounter} increment={10} />\n      <Buttons onClickFunction={incrementCounter} increment={100} />\n      <Display message={counter}/>\n    </div>  \n  );\n}\n\nReactDOM.render(\n  <App />, \n  document.getElementById('mountNode'),\n);","React: Getting Started","The Basics","Components Reusability","2:36","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=6&mode=live&start=156.290168&noteid=ace0c419-1041-4a90-ad25-aafdf1988afa"
"HTML DOM is much simpler but the reason we are using React is to update any existing views in the DOM.","React: Getting Started","The Basics","Tree Reconciliation in Action","3:23","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=203.14735&noteid=d3d5ef27-9fbc-426d-8ab7-f23527641d96"
"const render = () => {\n  document.getElementById('mountNode').innerHTML = `\n    <div>\n      Hello HTML\n      <input />\n      <pre>${(new Date).toLocaleTimeString()}</pre>\n    </div>\n  `;\n\n  ReactDOM.render(\n    React.createElement(\n      'div',\n      null,\n      'Hello React',\n      React.createElement('input', null),\n      React.createElement('pre', null, (new Date).toLocaleTimeString())\n    ),\n    document.getElementById('mountNode2')\n  );\n};\n\nsetInterval(render, 1000);\n","React: Getting Started","The Basics","Tree Reconciliation in Action","4:56","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=296.423564&noteid=6751746e-7819-4bb2-902a-1358b48815cd"
" https://jscomplete.com/playground/rgs1.8 ","React: Getting Started","The Basics","Tree Reconciliation in Action","4:56","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=296.423564&noteid=00b3c14e-c9ff-49aa-aca3-d95848aaa240"
"Here when we write something in the HTML text box, we won't be able to  coz we are throwing away the whole DOM node on every tick and regenerating it.\nHowvere if you type something in the React text box you can certainly do that because React is changing only the timestamp node and not the whole DOM node.\nThis is why the text input was not regenerated and we were able to type into it.","React: Getting Started","The Basics","Tree Reconciliation in Action","4:56","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=296.423564&noteid=6668783e-6cd1-4142-b094-b8aa4a5e229f"
"React only regenerates in its DOM node what actually needs to be regenerated while it keeps everything else the same.\nThis diffing process is possible because of React's virtual DOM and the fact that we have the representation of our User Interface in memory because we wrote it in Javascript.","React: Getting Started","The Basics","Tree Reconciliation in Action","5:33","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=333.306466&noteid=ebc379f0-e2ee-4053-b3ae-a6c0c5d41b33"
"For every tick in this example, React  keeps the last UI version in memory and when it has a new one to tick to the browser , that new UI version will also be in memory  . So react can compute the difference between the new and the old versions.  In this example the difference was the content of the pre element. React will instruct the browser to update only the computed div and not the whole DOM node.","React: Getting Started","The Basics","Tree Reconciliation in Action","5:51","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=351.82801&noteid=57323823-dcd0-40a8-967d-e8ffcbc81fa7"
"No imperative logic is here.","React: Getting Started","The Basics","Tree Reconciliation in Action","6:48","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=7&mode=live&start=408.979886&noteid=7ee794a9-ed96-48cb-89b8-f3e516765abd"
" A React application is a set of reusable components. Components are just like functions. They take input, and they output a description of a user interface in the form of a React element. The ReactDOM library enables us to render those React elements in the browser, and it will rerender them for us automatically when they're in-memory state changes. To accomplish this, we write the component's markup using the React JavaScript API. Writing HTML in JavaScript is a lot different than what we're used to, but luckily React has a way to write the virtual DOM in a syntax very close to the HTML syntax we're used to. This special React syntax is called JSX. Once we have the virtual DOM description in JSX, we can pre-transform it to valid React API calls before shipping it to the browser. Browsers do not have to deal with JSX. The input for a component is a set of properties you can access inside the component with its first argument object, which is usually named props, and also a set of state elements that a component can hook into with the special useState function. A component state can be changed inside that component, and every time a component changes its state, React rerenders it. The props of a component cannot be changed by the component, but the whole component can be rerendered with different props by the component's parent. The syntax to mount a React component in a browser is ReactDOM.render, and that takes two arguments, the component to render and the HTML element to hold the React rendered markup. React also comes with normalized events that work across all browsers in a standard way. We've seen the onClick event handler in this course module, and there are other onSomething events like onChange, and onSubmit, and many others. React actually has two types of components, function and class components. ","React: Getting Started","The Basics","Wrap Up","0:05","https://app.pluralsight.com/player?course=react-js-getting-started&author=samer-buna&name=react-js-getting-started-m1&clip=8&mode=live&start=5.670231&noteid=5a5eef59-eb81-4e94-bfd3-a52f0b0e4afe"